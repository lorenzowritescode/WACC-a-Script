package antlr;

import java.util.ArrayList;

import org.antlr.v4.runtime.tree.ParseTree;

import symboltable.SymbolTable;
import tree.ProgNode;
import tree.WACCTree;
import tree.expr.BoolLeaf;
import tree.expr.CharLeaf;
import tree.expr.IntLeaf;
import tree.expr.StringLeaf;
import tree.func.FuncDecNode;
import tree.func.ParamListNode;
import tree.func.ParamNode;
import tree.stat.ReturnStatNode;
import tree.stat.SeqStatNode;
import tree.stat.StatNode;
import tree.stat.VarDecNode;
import tree.type.WACCType;
import antlr.WACCParser.Array_typeContext;
import antlr.WACCParser.Assign_lhsContext;
import antlr.WACCParser.Assign_rhsContext;
import antlr.WACCParser.Bool_literContext;
import antlr.WACCParser.Char_literContext;
import antlr.WACCParser.Exit_statContext;
import antlr.WACCParser.ExprContext;
import antlr.WACCParser.Free_statContext;
import antlr.WACCParser.FuncContext;
import antlr.WACCParser.If_statContext;
import antlr.WACCParser.Int_literContext;
import antlr.WACCParser.Pair_typeContext;
import antlr.WACCParser.ParamContext;
import antlr.WACCParser.Param_listContext;
import antlr.WACCParser.Print_statContext;
import antlr.WACCParser.Println_exprContext;
import antlr.WACCParser.ProgContext;
import antlr.WACCParser.Read_statContext;
import antlr.WACCParser.Return_statContext;
import antlr.WACCParser.Sequential_statContext;
import antlr.WACCParser.Str_literContext;
import antlr.WACCParser.Variable_assigmentContext;
import antlr.WACCParser.Variable_declarationContext;
import antlr.WACCParser.While_statContext;

public class SemanticChecker extends WACCParserBaseVisitor<WACCTree>{

	private ParseTree parseTree;
	private SymbolTable currentSymbolTable;

	public SemanticChecker(ParseTree t) {
		this.parseTree = t;
		this.currentSymbolTable = new SymbolTable();
	}

	public void init() {
		parseTree.accept(this);
	}

	@Override
	public WACCTree visitFunc(FuncContext ctx) {
<<<<<<< HEAD
		ParamListNode params = (ParamListNode) visit(ctx.param_list());
=======
		ParamListNode params = new ParamListNode();
		for (ParamContext p : ctx.param_list().param()){
			ParamNode pn = (ParamNode) visit(p);
			pn.check(currentSymbolTable, null);
			params.add(pn);
		}
>>>>>>> 46867e7ea5e50ca7c45dbcbdae18e366d2f80a3f
		
		currentSymbolTable = new SymbolTable(currentSymbolTable);
		
		StatNode funcBody = (StatNode) visit(ctx.stat());
		funcBody.check(currentSymbolTable, null);
		
		currentSymbolTable = currentSymbolTable.getParent();
		WACCType returnType = WACCType.evalType(ctx.type());
		String funcName = ctx.ident().getText();
		return new FuncDecNode(returnType, funcName, params, funcBody);
	}

	@Override
	public WACCTree visitReturn_stat(Return_statContext ctx) {
		WACCTree exprType = visit(ctx.expr());
		exprType.check(currentSymbolTable, null);
		
		ReturnStatNode rst = new ReturnStatNode(exprType);
		rst.check(currentSymbolTable, null);
		return rst;
	}

	@Override
	public WACCTree visitSequential_stat(Sequential_statContext ctx) {
		StatNode lhs = (StatNode) visit(ctx.stat(0));
		lhs.check(currentSymbolTable, null);
		StatNode rhs = (StatNode) visit(ctx.stat(1));
		rhs.check(currentSymbolTable, null);
		return new SeqStatNode(lhs, rhs);
	}

	@Override
	public WACCTree visitProg(ProgContext ctx) {
		// First we visit all functions and register a stub of its return type
		for (FuncContext fctx : ctx.func()){
			registerFunction(fctx);
		}
		
		ArrayList<FuncDecNode> functions = new ArrayList<>();
		// We visit all the functions and create full nodes
		for (FuncContext fctx : ctx.func()){
			FuncDecNode fdec = (FuncDecNode) visit(fctx);
			fdec.check(currentSymbolTable, null);
			functions.add(fdec);
		}
		
		// Then we visit the statement
		StatNode progBody = (StatNode) visit(ctx.stat());
		progBody.check(currentSymbolTable, null);
		
		// Finally, we return the program node
		return new ProgNode(functions, progBody);
	}

	/**
	 * registerFunction adds a stub of the function into the currentSymbolTable without recursing into the function body.
	 * This is to support nested function calls, where a function body might call a not yet defined function.
	 * @param fctx
	 * 		The FuncContext generated by the Parser
	 */
	private void registerFunction(FuncContext fctx) {
		String funcName = fctx.ident().getText();
		WACCType returnType = WACCType.evalType(fctx.type());
		FuncDecNode funcStub = new FuncDecNode(returnType, funcName);
		currentSymbolTable.add(funcName, funcStub);
	}

	@Override
	public WACCTree visitVariable_declaration(Variable_declarationContext ctx) {
		WACCTree rhsTree = visit(ctx.assign_rhs());
		VarDecNode vcd = new VarDecNode(ctx, rhsTree);
		vcd.check(currentSymbolTable, null);
		return vcd;
	}


	@Override
	public WACCTree visitChar_liter(Char_literContext ctx) {
		CharLeaf charleaf = new CharLeaf(ctx.getText());
		charleaf.check(currentSymbolTable, null);
		return charleaf;
	}

	@Override
	public WACCTree visitInt_liter(Int_literContext ctx) {
		int value = Integer.parseInt(ctx.getText());
		IntLeaf intLeaf = new IntLeaf(value);
		intLeaf.check(currentSymbolTable);
		return intLeaf;
	}

	@Override
	public WACCTree visitBool_liter(Bool_literContext ctx) {
		BoolLeaf boolLeaf = new BoolLeaf(ctx.getText());
		boolLeaf.check(currentSymbolTable);
		return boolLeaf;
	}

	@Override
	public WACCTree visitStr_liter(Str_literContext ctx) {
		StringLeaf strLeaf = new StringLeaf(ctx.getText());
		strLeaf.check(currentSymbolTable);
		return strLeaf;
	}

	@Override
	public WACCTree visitParam(ParamContext ctx) {
		ParamNode paramNode = new ParamNode(ctx);
		paramNode.check(currentSymbolTable);
		return paramNode;
	}

	@Override
	public WACCTree visitVariable_assigment(Variable_assigmentContext ctx) {
		// TODO Auto-generated method stub
		return super.visitVariable_assigment(ctx);
	}

	@Override
	public WACCTree visitExpr(ExprContext ctx) {
		// TODO Auto-generated method stub
		return super.visitExpr(ctx);
	}

	@Override
	public WACCTree visitArray_type(Array_typeContext ctx) {
		// TODO Auto-generated method stub
		return super.visitArray_type(ctx);
	}

	@Override
	public WACCTree visitExit_stat(Exit_statContext ctx) {
		// TODO Auto-generated method stub
		return super.visitExit_stat(ctx);
	}

	@Override
	public WACCTree visitPrint_stat(Print_statContext ctx) {
		// TODO Auto-generated method stub
		return super.visitPrint_stat(ctx);
	}

	@Override
	public WACCTree visitPair_type(Pair_typeContext ctx) {
		// TODO Auto-generated method stub
		return super.visitPair_type(ctx);
	}

	@Override
	public WACCTree visitAssign_lhs(Assign_lhsContext ctx) {
		// TODO Auto-generated method stub
		return super.visitAssign_lhs(ctx);
	}

	@Override
	public WACCTree visitParam_list(Param_listContext ctx) {
		ParamListNode params = new ParamListNode();
		for (ParamContext p : ctx.param()){
			ParamNode pn = (ParamNode) visit(p);
			pn.check(currentSymbolTable);
			params.add(pn);
		}
		params.check(currentSymbolTable);
		return params;
	}

	@Override
	public WACCTree visitFree_stat(Free_statContext ctx) {
		// TODO Auto-generated method stub
		return super.visitFree_stat(ctx);
	}

	@Override
	public WACCTree visitRead_stat(Read_statContext ctx) {
		// TODO Auto-generated method stub
		return super.visitRead_stat(ctx);
	}

	@Override
	public WACCTree visitAssign_rhs(Assign_rhsContext ctx) {
		// TODO Auto-generated method stub
		return super.visitAssign_rhs(ctx);
	}

	@Override
	public WACCTree visitWhile_stat(While_statContext ctx) {
		// TODO Auto-generated method stub
		return super.visitWhile_stat(ctx);
	}

	@Override
	public WACCTree visitIf_stat(If_statContext ctx) {
		// TODO Auto-generated method stub
		return super.visitIf_stat(ctx);
	}
	

	@Override
	public WACCTree visitPrintln_expr(Println_exprContext ctx) {
		// TODO Auto-generated method stub
		return super.visitPrintln_expr(ctx);
	}

}
